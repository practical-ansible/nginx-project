---

- include_tasks: package.yml

- name: ddd
  debug:
    var: project_name
- name: Check required variables
  assert:
    that:
      - '{{ item }} is defined'
      - '{{ item }} != ""'
      - '{{ item }} != 0'
  with_items:
    - 'admin_email'
    - 'project_environment'
    - 'project_name'
    - 'project_port'
    - 'server_names'

- name: Make project id safe
  set_fact:
    instance_id: 'docker-{{ project_name }}-{{ project_environment }}'

- name: Configure paths
  set_fact:
    dir_project: '{{ projects_directory }}/{{ project_name }}'
    dir_ssl: '{{ projects_directory }}/{{ project_name }}/ssl'
    dir_versions: '{{ projects_directory }}/{{ project_name }}/versions'
    file_site_config: '/etc/nginx/sites-available/{{ instance_id }}.conf'
    file_ssl_cert: '{{ projects_directory }}/{{ project_name }}/ssl/cert'
    file_ssl_key: '{{ projects_directory }}/{{ project_name }}/ssl/key'

- name: Parse server names
  set_fact:
    dns_all: '{{ server_names.split(",") }}'

- name: Set main domain
  set_fact:
    dns_main: '{{ dns_all[0] }}'
    dns_other_names: '{{ dns_all | difference([dns_all[0]]) }}'

- name: Install Nginx
  apt:
    name: nginx
    state: present

- name: Create project dirs
  file:
    path: "{{ item }}"
    state: directory
    mode: 0775
    group: '{{ group }}'
    owner: '{{ user }}'
  with_items:
    - '{{ dir_project }}'
    - '{{ dir_ssl }}'
    - '{{ dir_versions }}'

- name: Check SSL cert existence
  register: ssl_cert_stat
  stat:
    path: '{{ file_ssl_cert }}'
    follow: true

- name: Check SSL key existence
  register: ssl_key_stat
  stat:
    path: '{{ file_ssl_key }}'
    follow: true

- include_tasks: config-non-ssl.yml
  when: not use_ssl

- include_tasks: config-ssl.yml
  when: use_ssl and not (ssl_cert_stat.stat.exists and ssl_key_stat.stat.exists)

- name: Enable nginx app
  file:
    src: '/etc/nginx/sites-available/{{ instance_id }}.conf'
    dest: '/etc/nginx/sites-enabled/{{ instance_id }}.conf'
    state: link
  notify:
    - reload nginx
